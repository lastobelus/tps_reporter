!!! 5
%html
  %head
    %script{src: "http://cdnjs.cloudflare.com/ajax/libs/jquery/1.7/jquery.min.js"}

    :javascript
      $("td").live('click', function() {
        $(this).closest('tr').toggleClass('highlight');
      });

    %style
      :plain
        body {
          padding: 0;
          margin: 0; }

        body, td {
          font-family: pt sans, sans-serif;
          color: #333;
          line-height: 13.5pt;
          font-size: 9pt; }

        table {
          border: solid 2px #aaa;
          padding: 2px;

          background: #fafafa;
          margin: 0;
          width: 600px;
          border-collapse: collapse; }

        table td, table th {
          padding: 5px 10px;
          border-top: solid 1px #eee; }

        /* Columns */
        tr>.task { width: 50%; text-align: left; }
        tr>.points { width: 9%; }
        tr>.progress { width: 18%; }
        tr>.owner { display: none; }

        /* Indentation */
        .level-1 .task { padding-left: 25px; }
        .level-2 .task { padding-left: 50px; }
        .level-3 .task { padding-left: 75px; }
        .level-4 .task { padding-left: 100px; }

        /* Overrides for parents */
        .milestone td.task,
        .feature td.task {
          font-weight: bold;
          font-size: 1.1em; }

        tr.milestone td,
        tr.feature td {
          border-top: solid 1px #888; }

        tr .progress .bar {
          display: none; }

        tr.milestone .progress .bar,
        tr.feature .progress .bar {
          display: block; }

        tr td.points>* {
          display: none; }

        tr.milestone td.points>*,
        tr.feature td.points>* {
          display: inline; }

        /* Header */
        thead {
          display: none; }

        th {
          color: #888; }

        /* Zebra */
        tr td,
        tr {
          background: #ffffff; }

        tr:nth-child(odd) td,
        tr:nth-child(odd) {
          background: #fafafa; }

        tr.highlight,
        tr.highlight td {
          background: #fafae0; }

        /* Status box */
        span.status {
          display: inline-block;
          width: 12px;
          height: 12px;
          margin: 0 5px 0 0;

          border-radius: 2px;

          position: relative;
          top: 2px;
          background: #ddd; }

        span.status.in_progress {
          background: #ea3; }

        span.status.done {
          background: #393; }

        /* Progress */
        .progress .number {
          display: none; }

        .progress .bar {
          height: 10px;
          border-radius: 5px;
          background: #ddd; }

        .progress .bar span {
          display: block;
          height: 10px;
          border-radius: 5px;
          background: #888; }

        a.meta {
          font-size: 8pt;
          font-weight: normal;
          text-decoration: none;

          background: #ddd;
          padding: 1px 3px;
          border-radius: 2px;
          border-bottom: solid 1px #ccc;

          margin: 0 5px;
          color: #777; }

        /* Progress */
        td.points {
          text-align: left;
          font-size: 0.9em; }

        td.points .points.done {
          font-weight: bold; }

        td.points .of,
        td.points .points.total {
          color: #888; }

  %body

    %table
      %thead
        %tr
          %th.task Task
          %th.owner Owner
          %th.progress Progress
          %th.points Points

      - list.walk do |task, recurse|

        %tr{class: "level-#{task.level} #{task.tasks? ? 'parent' : 'leaf'} #{'root' if task.root?} #{'feature' if task.feature?} #{'milestone' if task.milestone?}"}
          %td.task
            %span.status{class: "#{task.status}"}
            = task
            - if task.pivotal_id
              %a.meta{href: task.pivotal_url}= "PT ##{task.pivotal_id}"

          %td.owner
            = task.owner

          %td.progress
            .bar
              %span{style: "width: #{(task.percent*95+5).to_i}%"}
            %span.number= "#{(task.percent*100).to_i}%"

          %td.points
            %span.points.done= task.points_done.round(1).to_s.gsub(/\.0+$/,'')
            %span.of of
            %span.points.total= task.points.round(1).to_s.gsub(/\.0+$/,'')

        - recurse.call  if recurse
